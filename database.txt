DROP VIEW ACCESSINFO;
DROP VIEW GOODSLIST;
DROP VIEW ACCESSHISTORY;
DROP VIEW SALESS;
DROP SYNONYM POI;
DROP SYNONYM ODT;
DROP SYNONYM ORD;
DROP SYNONYM MEM;
DROP SYNONYM GOO;
DROP SYNONYM AHT;
DROP SYNONYM EMP;
DROP SYNONYM CGI;
DROP TABLE POINTS;
DROP TABLE ORDERDETAILS;
DROP TABLE ORDERS;
DROP TABLE MEMBERS;
DROP TABLE GOODS;
DROP TABLE ACCESSHISTORY1;
DROP TABLE EMPLOYEES;
DROP TABLE CATEGORYITEM;

/* [ JS Framework를 활용한 Smart Web 개발자 ] */
/* 구현기능
   -- T : LANDING 
   -- T : 로그인
   -- T : 로그아웃
   -- P : 관리페이지 >> 대표, 매니저 접근가능 >> 직원등록 및 수정, 상품등록 및 수정
   -- P : 통계페이지 >> 대표만 접근 가능 >> 금월 직원의 출퇴근 기록을 일단위로 조회, 금월의 일단위 매출 및 영업이익 조회
   -- P : 판매페이지 >> 대표, 매니저, 아르바이트 접근가능 >> 주문을 위한 상품 검색 및 주문 등록, 회원 주문을 위한 포인트 등록
*/

/* 아래의 테이블 스크립트를 활용할 계정과 DATABASE는 팀별로 구축할시오.
   TABLE LIST 
   1. EMPLOYEES TABLE
   2. MEMBERS TABLE
   3. GOODS TABLE
   4. ORDERS TABLE
   5. ORDERSDETAILS TABLE
   6. POINTS TABLE
   7. ACCESSHISTORY TABLE
   8. CATEGORYITEM TABLE
*/

-- 8. CATEGORYITEM(SYNONYM : CGI)
CREATE TABLE CATEGORYITEM(
  CGI_CODE   NCHAR(2)        NOT NULL,
  CGI_NAME   NVARCHAR2(20)   NOT NULL
)TABLESPACE USERS;
  -- CONSTRAINTS
  ALTER TABLE CATEGORYITEM
  ADD CONSTRAINT CGI_CODE_PK     PRIMARY KEY(CGI_CODE);
  
  -- SYNONYM
  CREATE SYNONYM CGI FOR CATEGORYITEM;

  -- DATA
  INSERT INTO CGI(CGI_CODE, CGI_NAME) VALUES('PR', '대표');
  INSERT INTO CGI(CGI_CODE, CGI_NAME) VALUES('MA', '매니저');
  INSERT INTO CGI(CGI_CODE, CGI_NAME) VALUES('AR', '아르바이트');
  INSERT INTO CGI(CGI_CODE, CGI_NAME) VALUES('GB', '음료');
  INSERT INTO CGI(CGI_CODE, CGI_NAME) VALUES('GF', '농축산물');
  INSERT INTO CGI(CGI_CODE, CGI_NAME) VALUES('GS', '과자류');
  INSERT INTO CGI(CGI_CODE, CGI_NAME) VALUES('GG', '식자재');
  INSERT INTO CGI(CGI_CODE, CGI_NAME) VALUES('GI', '인스턴트');
  INSERT INTO CGI(CGI_CODE, CGI_NAME) VALUES('OS', '주문진행중');
  INSERT INTO CGI(CGI_CODE, CGI_NAME) VALUES('OP', '포인트적립중');
  INSERT INTO CGI(CGI_CODE, CGI_NAME) VALUES('OC', '주문완료');
  
-- 1. EMPLOYEES(SYNONYM : EMP)
CREATE TABLE EMPLOYEES(
  EMP_CODE      NCHAR(5)        NOT NULL,
  EMP_PASSWORD  NVARCHAR2(50)   NOT NULL,
  EMP_NAME      NVARCHAR2(5)    NOT NULL,
  EMP_HIREDATE  DATE            NOT NULL,
  EMP_LEVEL     NCHAR(2)        NOT NULL
)TABLESPACE USERS;
  -- CONSTRAINTS
  ALTER TABLE EMPLOYEES
  ADD CONSTRAINT EMP_CODE_PK    PRIMARY KEY(EMP_CODE);
  ALTER TABLE EMPLOYEES
  ADD CONSTRAINT EMP_LEVEL_FK   FOREIGN KEY(EMP_LEVEL) REFERENCES CATEGORYITEM(CGI_CODE);
  
  -- SYNONYM
  CREATE SYNONYM EMP FOR EMPLOYEES;
  
  -- DATA : 대표자의 코드는 '0000'+팀번호 패스워드는 팀번호로 네자리 반복, 대표자명은 팀번호+'TEAM'  입사일은 '20220623'
  INSERT INTO EMP(EMP_CODE, EMP_PASSWORD, EMP_NAME, EMP_HIREDATE, EMP_LEVEL) 
  VALUES('00001', '1111', '1TEAM', TO_DATE('20220623', 'YYYYMMDD'), 'PR');
  -- 매니저
  INSERT INTO EMP(EMP_CODE, EMP_PASSWORD, EMP_NAME, EMP_HIREDATE, EMP_LEVEL) 
  VALUES('00011', '1111', '1MA', TO_DATE('20220623', 'YYYYMMDD'), 'MA');
  -- 알바 
  INSERT INTO EMP(EMP_CODE, EMP_PASSWORD, EMP_NAME, EMP_HIREDATE, EMP_LEVEL) 
  VALUES('00111', '1111', '1AR', TO_DATE('20220623', 'YYYYMMDD'), 'AR');
-- 7. ACCESSHISTORY(SYNONYM : AHT)
CREATE TABLE ACCESSHISTORY1(
  AHT_EMPCODE   NCHAR(5)    NOT NULL,
  AHT_DATE      DATE        DEFAULT SYSDATE NOT NULL,
  AHT_ACTION    NUMBER(1,0) NOT NULL
)TABLESPACE USERS;

  -- CONSTRAINTS
  ALTER TABLE ACCESSHISTORY1
  ADD CONSTRAINT AHT_EMPCODE_DATE_ACTION_PK PRIMARY KEY(AHT_EMPCODE, AHT_DATE, AHT_ACTION);
   ALTER TABLE ACCESSHISTORY1
  ADD CONSTRAINT AHT_EMPCODE_FK FOREIGN KEY(AHT_EMPCODE) REFERENCES EMPLOYEES(EMP_CODE);
  
  -- SYNONYM
  CREATE SYNONYM AHT FOR ACCESSHISTORY1;
  
  -- DATA
  
  
-- 2. MEMBERS(MEM)
CREATE TABLE MEMBERS(
  MEM_CODE      NCHAR(5)        NOT NULL,
  MEM_NAME      NVARCHAR2(5)    NOT NULL,
  MEM_PHONE     NVARCHAR2(11)   DEFAULT 'NONE'
)TABLESPACE USERS;

  -- CONSTRAINTS
  ALTER TABLE MEMBERS
  ADD CONSTRAINT MEM_CODE_PK    PRIMARY KEY(MEM_CODE);
  
  -- SYNONYM
  CREATE SYNONYM MEM FOR MEMBERS;
  
  -- DATA
INSERT INTO MEM(MEM_CODE, MEM_NAME, MEM_PHONE) VALUES('00001','준웅쿤','01011111111');
INSERT INTO MEM(MEM_CODE, MEM_NAME, MEM_PHONE) VALUES('99999','비회원','01099999999');
INSERT INTO MEM(MEM_CODE, MEM_NAME, MEM_PHONE) VALUES('00002','경준쿤','01022222222');

INSERT INTO AHT(AHT_EMPCODE, AHT_DATE, AHT_ACTION) VALUES('00001', SYSDATE, 1);
INSERT INTO AHT(AHT_EMPCODE, AHT_DATE, AHT_ACTION) VALUES('00001', SYSDATE + INTERVAL '1' HOUR, -1);
INSERT INTO AHT(AHT_EMPCODE, AHT_DATE, AHT_ACTION) VALUES('00011', SYSDATE, 1);
INSERT INTO AHT(AHT_EMPCODE, AHT_DATE, AHT_ACTION) VALUES('00011', SYSDATE + INTERVAL '1' HOUR, -1);
INSERT INTO AHT(AHT_EMPCODE, AHT_DATE, AHT_ACTION) VALUES('00111', SYSDATE, 1);
INSERT INTO AHT(AHT_EMPCODE, AHT_DATE, AHT_ACTION) VALUES('00111', SYSDATE + INTERVAL '1' HOUR, -1);
-- 3. GOODS(GOO) : 상품코드 = 대표자코드+CGICODE+일련번호3자리 
CREATE TABLE GOODS(
  GOO_CODE      NCHAR(10)       NOT NULL,
  GOO_NAME      NVARCHAR2(50)   NOT NULL,
  GOO_COST      NUMBER(7,0)     NOT NULL,
  GOO_PRICE     NUMBER(7,0)     NOT NULL,
  GOO_STOCK     NUMBER(3,0)     NOT NULL,
  GOO_CGICODE   NCHAR(2)        NOT NULL
)TABLESPACE USERS;

  -- CONSTRAINTS
  ALTER TABLE GOODS
  ADD CONSTRAINT GOO_CODE_PK    PRIMARY KEY(GOO_CODE);
    ALTER TABLE GOODS
  ADD CONSTRAINT GOO_CGICODE_FK FOREIGN KEY(GOO_CGICODE) REFERENCES CATEGORYITEM(CGI_CODE);
  
  -- SYNONYM
  CREATE SYNONYM GOO FOR GOODS;
  
  -- DATA 00001 + GB + NNN
  --INSERT
  INSERT INTO GOO(GOO_CODE, GOO_NAME, GOO_COST, GOO_PRICE, GOO_STOCK, GOO_CGICODE)
  VALUES('00001GB001', '제로콜라', 1500, 2000, 100, 'GB');   
    INSERT INTO GOO(GOO_CODE, GOO_NAME, GOO_COST, GOO_PRICE, GOO_STOCK, GOO_CGICODE)
  VALUES('00001GF001', '배추', 500, 1000, 100, 'GF');   
    INSERT INTO GOO(GOO_CODE, GOO_NAME, GOO_COST, GOO_PRICE, GOO_STOCK, GOO_CGICODE)
  VALUES('00001GS001', '초코송이', 250, 500, 100, 'GS');   
    INSERT INTO GOO(GOO_CODE, GOO_NAME, GOO_COST, GOO_PRICE, GOO_STOCK, GOO_CGICODE)
  VALUES('00001GG001', '게맛살', 1000, 2000, 100, 'GG');   
    INSERT INTO GOO(GOO_CODE, GOO_NAME, GOO_COST, GOO_PRICE, GOO_STOCK, GOO_CGICODE)
  VALUES('00001GI001', '너와함께라면', 1500, 2500, 100, 'GI');   

-- 4. ORDERS(ORD)
CREATE TABLE ORDERS(
  ORD_EMPCODE   NCHAR(5)    NOT NULL,
  ORD_DATE      DATE        DEFAULT SYSDATE NOT NULL,
  ORD_STATE     NCHAR(2)
)TABLESPACE USERS;

  -- CONSTRAINTS
  ALTER TABLE ORDERS
  ADD CONSTRAINT ORD_EMPCODE_DATE_PK    PRIMARY KEY(ORD_EMPCODE, ORD_DATE);
  ALTER TABLE ORDERS
  ADD CONSTRAINT ORD_STATE_FK   FOREIGN KEY(ORD_STATE) REFERENCES CATEGORYITEM(CGI_CODE);
  
  -- SYNONYM
  CREATE SYNONYM ORD FOR ORDERS;
  
  -- DATA
  
  
-- 5. ORDERSDETAILS(ODT)
CREATE TABLE ORDERDETAILS(
  ODT_ORDEMPCODE    NCHAR(5)    NOT NULL,
  ODT_ORDDATE       DATE        NOT NULL,
  ODT_GOOCODE       NCHAR(10)   NOT NULL,
  ODT_QUANTITY      NUMBER(3,0) DEFAULT 1 NOT NULL
)TABLESPACE USERS;

  -- CONSTRAINTS
  ALTER TABLE ORDERDETAILS
  ADD CONSTRAINT ODT_ORDEMPCODE_DATE_GOOCODE_PK  PRIMARY KEY(ODT_ORDEMPCODE, ODT_ORDDATE, ODT_GOOCODE);
   ALTER TABLE ORDERDETAILS
  ADD CONSTRAINT ODT_ORDEMPCODE_ORDDATE_FK  FOREIGN KEY(ODT_ORDEMPCODE, ODT_ORDDATE) REFERENCES ORDERS(ORD_EMPCODE, ORD_DATE);
   ALTER TABLE ORDERDETAILS
  ADD CONSTRAINT ODT_GOOCODE_FK     FOREIGN KEY(ODT_GOOCODE)    REFERENCES GOODS(GOO_CODE);
  
  -- SYNONYM
  CREATE SYNONYM ODT FOR ORDERDETAILS;
  
  -- DATA
  
  
-- 6. POINTS(POI)
CREATE TABLE POINTS(
  POI_ORDEMPCODE    NCHAR(5)    NOT NULL,
  POI_ORDDATE       DATE        NOT NULL,
  POI_MEMCODE       NCHAR(5)    NOT NULL,
  POI_AMOUNT        NUMBER(3,0) NOT NULL,
  POI_ACTION        NUMBER(1,0) DEFAULT 1 NOT NULL
)TABLESPACE USERS;

  -- CONSTRAINTS
  ALTER TABLE POINTS
  ADD CONSTRAINT POI_ORDEMPCODE_DATE_MEMCODE_PK    PRIMARY KEY(POI_ORDEMPCODE, POI_ORDDATE, POI_MEMCODE);
  ALTER TABLE POINTS
  ADD CONSTRAINT POI_ORDEMPCODE_ORDDATE_FK         FOREIGN KEY(POI_ORDEMPCODE, POI_ORDDATE) REFERENCES ORDERS(ORD_EMPCODE, ORD_DATE);
  ALTER TABLE POINTS
  ADD CONSTRAINT POI_MEMCODE_FK     FOREIGN KEY(POI_MEMCODE) REFERENCES MEMBERS(MEM_CODE);
  
  -- SYNONYM
  CREATE SYNONYM POI FOR POINTS;

  -- DATA
  
  -- VIEW
  -- ACCESSINFO 
  CREATE OR REPLACE VIEW ACCESSINFO AS
  SELECT EMP.EMP_CODE AS EMPLOYEECODE,
         EMP.EMP_NAME AS EMPLOYEENAME,
         TO_CHAR(AHT.AHT_DATE, 'YYYY-MM-DD HH24:MI:SS') AS ACCESSTIME,
         EMP.EMP_LEVEL AS EMPLOYEELEVEL
  FROM EMP INNER JOIN AHT ON EMP.EMP_CODE = AHT.AHT_EMPCODE; 
  
  -- GOODSLIST
  CREATE OR REPLACE VIEW GOODSLIST AS
SELECT 
    GOO_CODE AS GOOCODE,
    GOO_NAME AS GOONAME,
    GOO_COST AS GOOCOST,
    GOO_PRICE AS GOOPRICE,
    GOO_STOCK AS GOOSTOCK,
    GOO_CGICODE AS CGICODE,
    CGI_NAME AS CGINAME
FROM GOO INNER JOIN CGI ON GOO_CGICODE = CGI_CODE;
        
--금월 직원의 출퇴근 기록을 일단위로 조회
    CREATE OR REPLACE VIEW ACCESSHISTORY AS
    SELECT
        TO_CHAR(AHT_DATE, 'YYYY-MM-DD') AS "DATE",
        EMP_NAME AS "EMPLOYEENAME",
        EMP_LEVEL AS "EMPLOYEELEVEL",
        AHT_ACTION AS "ACTION",
        TO_CHAR(AHT_DATE, 'HH24:MI:SS') AS "TIME"
        FROM EMP INNER JOIN AHT ON EMP_CODE = AHT_EMPCODE	
        WHERE TO_CHAR(AHT_DATE, 'MON') = TO_CHAR(SYSDATE, 'MON');
        
--금월의 일단위 매출 및 영업이익 조회
    CREATE OR REPLACE VIEW SALESS AS 
   SELECT 
        TO_CHAR(ODT.ODT_ORDDATE, 'YYYY-MM-DD') AS "DATE",
        SUM(ODT.ODT_QUANTITY * GOO.GOO_PRICE) AS REVENUE,
        SUM(ODT.ODT_QUANTITY * GOO.GOO_PRICE) - SUM(ODT.ODT_QUANTITY * GOO.GOO_COST) AS PROFIT
        FROM ODT INNER JOIN GOO ON ODT.ODT_GOOCODE = GOO.GOO_CODE
        WHERE TO_CHAR(ODT.ODT_ORDDATE, 'MON') = TO_CHAR(SYSDATE, 'MON')
        GROUP BY TO_CHAR(ODT.ODT_ORDDATE, 'YYYY-MM-DD');